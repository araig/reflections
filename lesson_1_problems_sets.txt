Purpose of the problem set
The questions in this problem set are designed not only to give extra practice with the concepts from Lesson 1, but also to help you deepen your understanding of those concepts. Some of the questions will be tricky, and you're not expected to get every question right on the first try. The purpose is for you to learn, so have fun!

Tracking versions using Git
You would be able to see the difference between the two versions, but you would no longer be able to directly access the old version.

This is false. You could still access the old version of the file by checking out the commit associated with that version. Then the recipe would temporarily revert to its state at the time that commit was made. 


Using git diff to compare the two versions would show the same changes as diff -u did in the previous exercise.

This is true. diff -u and git diff show very similar outputs. Even if the exact format was slightly different, the actual changes indicated would be the same. 


The name of the file would change when you saved a second version in Git.

This is false. The name of the file would remain the same. Git does not rename files when you save a new commit. Instead, Git uses the commit IDs to refer to different versions of the files, and you can use git checkout to access old versions of your files. 

Git command review
Compare two commits, printing each line that is present in one commit but not the other.

git diff will do this. It takes two arguments - the two commit ids to compare. 


Make a copy of an entire Git repository, including the history, onto your own computer.

git clone will do this. It takes one argument - the url of the repository to copy. 


Temporarily reset all files in a directory to their state at the time of a specific commit.

git checkout will do this. It takes one argument - the commit ID to restore. 


Show the commits made in this repository, starting with the most recent.

git log will do this. It doesn't take any arguments.


To save two versions of the file, you would create two commits.

This is true. Commits are Git's way of saving versions, so to save two different versions, you would create two commits.

