How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    

Fill in your answer here



How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    

Fill in your answer here



What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    

Fill in your answer here



Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    

Fill in your answer here



How can you use the commands git log and git diff to view the history of files?

    

Fill in your answer here



How might using version control make you more confident to make changes that
could break something?

    

Fill in your answer here



Now that you have your workspace set up, what do you want to try using Git for?

    

Fill in your answer here



Set up your course workspace
Right now, you should create a version-control directory (a more computer-science-y term for “folder”) to hold all your files for this course in an easy to remember location, then create a reflections sub-directory, and within that, create a plain text file called lesson_1_reflections.txt for the questions from this lesson.

You can do this by running the following commands in either Git Bash or the terminal (the bits after the # signs are comments, anything after those are not interpreted):
cd ~                          # change directories to your home directory
mkdir version-control         # make version-control directory
cd version-control            # go to version-control directory
mkdir reflections             # create reflections directory
cd reflections                # go to reflections directory
subl lesson_1_reflections.txt # launch sublime with file called lesson_1_reflections.txt (you can replace subl with another editor here if you prefer a different one)

Once you’ve saved your file, if you want to double-check that everything has gone as planned, try these commands:

pwd # print working directory - shows what directory you are in
ls  # list the files in this directory

Reflect: Using History for Efficiency
Now that you've learned about some version control systems, and how they can help you save the history of a file, go add the following question and your thoughts on it to your reflections file:

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

When you've updated your document, click "Next" to learn about some differences between these version control systems.

Reflect: Manual Commits
Now you've learned about Git commits and thought about good times to create commits, go add the following question and your thoughts on it to your reflections file:

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

When you've updated your document, click "Next" and Sarah will go over another difference between version control systems.

Reflect: Multi-File Commits
Go add the following question and your thoughts on it to your reflections file:

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

When you've updated your document, click "Next", and an experienced Git user will share why version control is useful to him.

Reflect: Using Git to View History
Now that you've had some experience using Git yourself, go add the following question and your thoughts on it to your reflections file:

How can you use the commands git log and git diff to view the history of files?

When you've updated your document, click "Next" to add more concepts to your map with Sarah. Then you'll learn how to use Git to return to previous versions of your files.

Reflect: Confidence from Version Control
Now that you know how to return to a previous version of your files using Git, go add the following question and your thoughts on it to your reflections file:

How might using version control make you more confident to make changes that could break something?

When you've updated your document, click "Next" to start configuring a workspace that will make you more efficient at using Git.
